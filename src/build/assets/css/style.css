@font-face {
  font-family: "Montserrat";
  font-style: normal;
  font-weight: 400;
  font-display: swap;
  src: url("../fonts/Montserrat-Regular.eot?") format("eot"), url("../fonts/Montserrat-Regular.woff") format("woff"), url("../fonts/Montserrat-Regular.ttf") format("truetype");
}

@font-face {
  font-family: "Montserrat";
  font-style: normal;
  font-weight: 500;
  font-display: swap;
  src: url("../fonts/Montserrat-Medium.eot?") format("eot"), url("../fonts/Montserrat-Medium.woff") format("woff"), url("../fonts/Montserrat-Medium.ttf") format("truetype");
}

@font-face {
  font-family: "Montserrat";
  font-style: normal;
  font-weight: 700;
  font-display: swap;
  src: url("../fonts/Montserrat-Bold.eot?") format("eot"), url("../fonts/Montserrat-Bold.woff") format("woff"), url("../fonts/Montserrat-Bold.ttf") format("truetype");
}

/* normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Remove default margin.
 */
body {
  margin: 0;
}

/* HTML5 display definitions
	 ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none;
}

/* Links
	 ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0;
}

/* Text-level semantics
	 ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* Embedded content
	 ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0;
}

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
	 ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0;
}

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
	 ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal;
}

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold;
}

/* Tables
	 ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}

html {
  font-size: var(--rem-base);
  box-sizing: border-box;
  padding: constant(safe-area-inset);
  padding: env(safe-area-inset);
}

@media (max-width: 1024px) {
  html {
    font-size: calc(var(--rem-base) - 1.5px);
  }
}

@media (max-width: 768px) {
  html {
    font-size: calc(var(--rem-base) - 2px);
  }
}

@media (max-width: 667px) {
  html {
    font-size: calc(var(--rem-base) - 2.5px);
  }
}

@media (max-width: 375px) {
  html {
    overflow-x: hidden;
    font-size: calc(var(--rem-base) - 3px);
  }
}

body {
  color: #000000;
  font: var(--font-size-base)/var(--line-height-base) "Montserrat", "Helvetica Neue", "Helvetica", sans-serif;
  min-width: 320px;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

h1,
.h1,
h2,
.h2,
h3,
.h3,
h4,
.h4,
h5,
.h5,
h6,
.h6,
.h {
  font-family: "Montserrat", "Helvetica Neue", "Helvetica", sans-serif;
  font-weight: bold;
  color: #000000;
}

h1 a,
.h1 a,
h2 a,
.h2 a,
h3 a,
.h3 a,
h4 a,
.h4 a,
h5 a,
.h5 a,
h6 a,
.h6 a,
.h a {
  color: inherit;
  font-size: inherit;
}

h1,
.h1 {
  font-size: var(--h1);
  margin: 0 0 0.3em;
}

h2,
.h2 {
  font-size: var(--h2);
  margin: 0 0 0.4em;
}

h3,
.h3 {
  font-size: var(--h3);
  margin: 0 0 0.5em;
}

h4,
.h4 {
  font-size: var(--h4);
  margin: 0 0 0.6em;
}

h5,
.h5 {
  font-size: var(--h5);
  margin: 0 0 0.7em;
}

h6,
.h6 {
  font-size: var(--h6);
  margin: 0 0 0.8em;
}

p {
  margin-bottom: 1.2em;
  margin-top: 0;
}

a {
  color: #000000;
  transition: all var(--animation-duration) var(--animation-timing-function);
  text-decoration: none;
}

img {
  max-width: 100%;
  height: auto;
  vertical-align: top;
}

ul,
ol {
  list-style: none;
  margin-top: 0;
  padding-left: 0;
}

ul li,
ol li {
  list-style: none;
}

* {
  box-sizing: inherit;
  max-height: 1000000px;
}

*:after, *:before {
  box-sizing: inherit;
}

.resize-active {
  transition: none !important;
}

.resize-active *,
.resize-active *:before,
.resize-active *:after {
  transition: inherit !important;
}

.container {
  width: 100%;
  margin: 0 auto;
  padding-left: var(--gutter);
  padding-right: var(--gutter);
  max-width: calc(1440px + var(--gutter) * 2);
}

html,
body {
  height: 100%;
}

.wrapper {
  display: grid;
  grid-template-rows: auto 1fr auto;
  min-height: 100%;
  width: 100%;
  position: relative;
  overflow: hidden;
}

.main,
.header,
.footer {
  min-width: 0;
}

.section {
  padding: 100px 0;
}

.section h1 {
  text-align: center;
  margin-bottom: 50px;
}

.hidden {
  display: none;
}

.toolbar {
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-bottom: 25px;
  gap: 20px;
}

.tooltip {
  position: relative;
}

.tooltip:before, .tooltip:after {
  --width-triangle: 5px;
  left: 0;
  opacity: 0;
  visibility: hidden;
  position: absolute;
  z-index: -100;
  top: 50%;
  transform: translateY(-50%);
  transition: all var(--animation-duration) var(--animation-timing-function);
}

.tooltip:before {
  position: absolute;
  top: 50%;
  content: '';
  width: 0;
  height: 0;
  border-top: var(--width-triangle) solid transparent;
  border-bottom: var(--width-triangle) solid transparent;
  border-left: var(--width-triangle) solid #000000;
  margin-left: calc(var(--width-triangle) * -1);
}

.tooltip:after {
  background: #000000;
  border-radius: 4px;
  color: #FFFFFF;
  content: attr(data-tip);
  padding: 5px 10px;
  width: 130px;
  left: calc(-130px + (var(--width-triangle) * -1));
  font-size: 14px;
  text-align: center;
}

.tooltip:hover:before, .tooltip:hover:after {
  opacity: 1;
  z-index: 100;
  visibility: visible;
}

.products {
  display: grid;
  gap: 30px;
  grid-template-columns: repeat(4, 1fr);
}

@media (max-width: 1199px) {
  .products {
    grid-template-columns: repeat(3, 1fr);
  }
}

@media (max-width: 1023px) {
  .products {
    gap: 20px;
  }
}

@media (max-width: 767px) {
  .products {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media (max-width: 567px) {
  .products {
    grid-template-columns: repeat(1, 1fr);
  }
}

.products.list-view {
  grid-template-columns: repeat(1, 1fr);
}

.products.list-view .product {
  flex-direction: row;
}

@media (max-width: 567px) {
  .products.list-view .product {
    flex-direction: column;
  }
}

.products.list-view .product__image {
  width: 250px;
  height: 250px;
}

@media (max-width: 567px) {
  .products.list-view .product__image {
    width: 100%;
    height: 330px;
  }
}

.products.list-view .product__content {
  text-align: left;
  align-items: flex-start;
}

@media (max-width: 567px) {
  .products.list-view .product__content {
    text-align: center;
    align-items: center;
  }
}

.products.list-view .product__price {
  margin-top: inherit;
  justify-content: flex-start;
}

@media (max-width: 567px) {
  .products.list-view .product__price {
    justify-content: center;
  }
}

.products.list-view .product__rating {
  margin-bottom: 20px;
}

.products.list-view .product__actions {
  position: relative;
  flex-direction: row;
  align-items: center;
  justify-content: flex-start;
  gap: 10px;
  height: auto;
  right: inherit;
  margin-top: auto;
  transition: transform var(--animation-duration);
}

@media (max-width: 666px) {
  .products.list-view .product__actions {
    flex-wrap: wrap;
  }
}

@media (max-width: 567px) {
  .products.list-view .product__actions {
    justify-content: center;
  }
}

.products.list-view .product__actions li {
  transform: none;
  transition: none;
}

@media (max-width: 666px) {
  .products.list-view .product__actions li:first-child {
    width: 100%;
    order: 4;
  }
}

.products.list-view .product__actions li a:hover {
  background: #000000;
}

.products.list-view .product__actions li a:hover img {
  filter: invert(100%);
}

.products.list-view .product__actions li a.cart-list {
  display: inline-block;
}

.products.list-view .product__actions li a.cart-list:hover {
  filter: none;
}

.products.list-view .product__actions li a.cart-grid {
  display: none;
}

.products.list-view .product__actions li a.tooltip:after {
  top: inherit;
  bottom: 100%;
  left: 50%;
  transform: translateX(-50%);
  margin-bottom: calc(var(--width-triangle) * 2);
}

.products.list-view .product__actions li a.tooltip:before {
  border-top: var(--width-triangle) solid #000000;
  border-left: var(--width-triangle) solid transparent;
  border-right: var(--width-triangle) solid transparent;
  border-bottom: var(--width-triangle) solid transparent;
  top: inherit;
  bottom: 100%;
  left: 50%;
  transform: translateX(-50%);
  margin-left: 0;
}

#loading {
  width: 100%;
  height: 100%;
  top: 0px;
  left: 0px;
  position: fixed;
  display: block;
  z-index: 99;
  background: #FFFFFF;
}

#loading .loader {
  display: inline-block;
  width: 80px;
  height: 80px;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translateX(-50%) translateY(-50%);
  z-index: 100;
}

#loading .loader:after {
  content: " ";
  display: block;
  width: 64px;
  height: 64px;
  margin: 8px;
  border-radius: 50%;
  border: 6px solid #4E7661;
  border-color: #4E7661 transparent #4E7661 transparent;
  animation: loader 1.2s linear infinite;
}

@keyframes loader {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.switch-layout {
  display: flex;
  align-items: center;
  gap: 10px;
  margin: 0;
}

@media (max-width: 567px) {
  .switch-layout {
    display: none;
  }
}

.switch-layout li a {
  opacity: 0.5;
}

.switch-layout li a:hover {
  opacity: 1;
}

.switch-layout li a img {
  max-width: 20px;
}

.switch-layout li.active a {
  opacity: 1;
}

.filter-box {
  max-width: max-content;
  position: relative;
  background: #EEEEEE;
}

@media (max-width: 567px) {
  .filter-box {
    max-width: 100%;
    width: 100%;
  }
}

.filter-box:after {
  position: absolute;
  content: '';
  background-image: url("../img/ico-arrow-down.svg");
  background-repeat: no-repeat;
  background-size: contain;
  width: 15px;
  height: 15px;
  right: 15px;
  top: 50%;
  transform: translateY(-50%);
  z-index: 0;
}

.filter-box select {
  padding: 10px 15px;
  background: transparent;
  border: none;
  -moz-appearance: none;
  -webkit-appearance: none;
  appearance: none;
  cursor: pointer;
  outline: none;
  min-width: 200px;
  position: relative;
  z-index: 1;
}

@media (max-width: 567px) {
  .filter-box select {
    width: 100%;
  }
}

.product {
  background-color: #FFFFFF;
  height: 100%;
  display: flex;
  flex-direction: column;
  text-decoration: none;
  position: relative;
  overflow: hidden;
  --img-height: 430px;
}

@media (max-width: 1023px) {
  .product {
    --img-height: 330px;
  }
}

@media (max-width: 767px) {
  .product {
    text-align: center;
  }
}

.product:hover .product__actions li {
  transform: translateX(0);
}

.product__image {
  width: 100%;
  height: var(--img-height);
  overflow: hidden;
  flex-shrink: 0;
  position: relative;
  background: #EEEEEE;
}

.product__image img {
  width: 100%;
  height: 100%;
  object-fit: contain;
}

.product__image .status {
  margin: 0;
  position: absolute;
  top: 10px;
  left: 10px;
  display: flex;
  gap: 5px;
}

.product__image .status li {
  background: #4E7661;
  color: #FFFFFF;
  padding: 5px 10px;
  font-size: 12px;
  font-weight: 500;
}

.product__content {
  padding: 20px;
  text-align: center;
  display: flex;
  flex-direction: column;
  align-items: center;
  height: 100%;
}

.product__title {
  color: #000000;
  margin-bottom: 15px;
  font-weight: 500;
  text-decoration: none;
}

.product__title:hover {
  color: #4E7661;
}

.product__price {
  margin-top: auto;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  margin-bottom: 15px;
}

.product__price .price-new {
  color: #000000;
  font-size: 20px;
  font-weight: 700;
}

.product__price .price-old {
  color: #7E7E7E;
  font-size: 16px;
  font-weight: 400;
  text-decoration: line-through;
}

.product__rating {
  display: flex;
  align-items: center;
  max-width: max-content;
  gap: 3px;
}

.product__rating .rating-block {
  width: 15px;
  height: 15px;
}

.product__actions {
  margin: 0;
  padding: 0;
  position: absolute;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 10px;
  height: var(--img-height);
  top: 0;
  right: 10px;
}

.product__actions li {
  transform: translateX(calc(100% + 10px));
}

@media (max-width: 1023px) {
  .product__actions li {
    transform: translateX(0);
  }
}

.product__actions li:nth-child(1) {
  transition: transform .4s;
}

.product__actions li:nth-child(2) {
  transition: transform .5s;
}

.product__actions li:nth-child(3) {
  transition: transform .6s;
}

.product__actions li:nth-child(4) {
  transition: transform .7s;
}

.product__actions li a {
  width: 45px;
  height: 45px;
  background: #FFFFFF;
  border-radius: 50%;
  display: block;
  display: flex;
  align-items: center;
  justify-content: center;
}

.product__actions li a img {
  width: 20px;
  height: 20px;
  object-fit: contain;
  border-radius: 0;
  transition: filter var(--animation-duration);
}

.product__actions li a.cart-list {
  width: auto;
  height: auto;
  background: #4E7661;
  padding: 10px 15px;
  color: #FFFFFF;
  border: 1px solid #4E7661;
  display: none;
  border-radius: 0;
  font-weight: 700;
}

.product__actions li a.cart-list:hover {
  background: #000000;
  color: #FFFFFF;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
